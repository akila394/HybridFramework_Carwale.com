{"uid":"e29725565608ab3b","name":"test_searchUsingBudget[chrome-Honda-Honda Cars]","fullName":"BDD.PythonPageObjectModel.Tests.test_searchAndFilter.Test_searchAndFilter#test_searchUsingBudget","historyId":"42a8e270cf570eb64551b57469482141","time":{"start":1666438159081,"stop":1666438209994,"duration":50913},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@placeholder='Max']\"}\n  (Session info: chrome=105.0.5195.127)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00F3DF13+2219795]\n\tOrdinal0 [0x00ED2841+1779777]\n\tOrdinal0 [0x00DE423D+803389]\n\tOrdinal0 [0x00E13025+995365]\n\tOrdinal0 [0x00E131EB+995819]\n\tOrdinal0 [0x00E40F52+1183570]\n\tOrdinal0 [0x00E2E844+1108036]\n\tOrdinal0 [0x00E3F192+1175954]\n\tOrdinal0 [0x00E2E616+1107478]\n\tOrdinal0 [0x00E07F89+950153]\n\tOrdinal0 [0x00E08F56+954198]\n\tGetHandleVerifier [0x01232CB2+3040210]\n\tGetHandleVerifier [0x01222BB4+2974420]\n\tGetHandleVerifier [0x00FD6A0A+565546]\n\tGetHandleVerifier [0x00FD5680+560544]\n\tOrdinal0 [0x00ED9A5C+1808988]\n\tOrdinal0 [0x00EDE3A8+1827752]\n\tOrdinal0 [0x00EDE495+1827989]\n\tOrdinal0 [0x00EE80A4+1867940]\n\tBaseThreadInitThunk [0x74258494+36]\n\tRtlAreBitsSet [0x778740E8+136]\n\tRtlAreBitsSet [0x778740B8+88]","statusTrace":"self = <Tests.test_searchAndFilter.Test_searchAndFilter object at 0x000001EF7F2AB9A0>\ncarbrand = 'Honda', carTitle = 'Honda Cars'\n\n    @pytest.mark.parametrize(\"carbrand, carTitle\", dataReader.get_data(\"filtercars\"))\n    def test_searchUsingBudget(self, carbrand, carTitle):\n        log.logger.info(\"Test_gotoCarBrand is started\")\n        home = HomePage(self.driver)\n        home.gotoNewCars()\n        car = BaseCarPage(self.driver)\n        print(carbrand)\n        if carbrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n>           car.filterCarsbyBudget()\n\ntest_searchAndFilter.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\PageObjects\\BaseCarPage.py:30: in filterCarsbyBudget\n    carpricemax = self.driver.find_element(By.XPATH, configReader.readConfig(\"webelements\", \"budgetSliderMax_Xpath\"))\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:857: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EF7F2A9900>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tBaseThreadInitThunk [0x74258494+36]\\\\n\\\\tRtlAreBitsSet [0x778740E8+136]\\\\n\\\\tRtlAreBitsSet [0x778740B8+88]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@placeholder='Max']\"}\nE         (Session info: chrome=105.0.5195.127)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00F3DF13+2219795]\nE       \tOrdinal0 [0x00ED2841+1779777]\nE       \tOrdinal0 [0x00DE423D+803389]\nE       \tOrdinal0 [0x00E13025+995365]\nE       \tOrdinal0 [0x00E131EB+995819]\nE       \tOrdinal0 [0x00E40F52+1183570]\nE       \tOrdinal0 [0x00E2E844+1108036]\nE       \tOrdinal0 [0x00E3F192+1175954]\nE       \tOrdinal0 [0x00E2E616+1107478]\nE       \tOrdinal0 [0x00E07F89+950153]\nE       \tOrdinal0 [0x00E08F56+954198]\nE       \tGetHandleVerifier [0x01232CB2+3040210]\nE       \tGetHandleVerifier [0x01222BB4+2974420]\nE       \tGetHandleVerifier [0x00FD6A0A+565546]\nE       \tGetHandleVerifier [0x00FD5680+560544]\nE       \tOrdinal0 [0x00ED9A5C+1808988]\nE       \tOrdinal0 [0x00EDE3A8+1827752]\nE       \tOrdinal0 [0x00EDE495+1827989]\nE       \tOrdinal0 [0x00EE80A4+1867940]\nE       \tBaseThreadInitThunk [0x74258494+36]\nE       \tRtlAreBitsSet [0x778740E8+136]\nE       \tRtlAreBitsSet [0x778740B8+88]\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_browser","time":{"start":1666438146180,"stop":1666438159075,"duration":12895},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@placeholder='Max']\"}\n  (Session info: chrome=105.0.5195.127)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00F3DF13+2219795]\n\tOrdinal0 [0x00ED2841+1779777]\n\tOrdinal0 [0x00DE423D+803389]\n\tOrdinal0 [0x00E13025+995365]\n\tOrdinal0 [0x00E131EB+995819]\n\tOrdinal0 [0x00E40F52+1183570]\n\tOrdinal0 [0x00E2E844+1108036]\n\tOrdinal0 [0x00E3F192+1175954]\n\tOrdinal0 [0x00E2E616+1107478]\n\tOrdinal0 [0x00E07F89+950153]\n\tOrdinal0 [0x00E08F56+954198]\n\tGetHandleVerifier [0x01232CB2+3040210]\n\tGetHandleVerifier [0x01222BB4+2974420]\n\tGetHandleVerifier [0x00FD6A0A+565546]\n\tGetHandleVerifier [0x00FD5680+560544]\n\tOrdinal0 [0x00ED9A5C+1808988]\n\tOrdinal0 [0x00EDE3A8+1827752]\n\tOrdinal0 [0x00EDE495+1827989]\n\tOrdinal0 [0x00EE80A4+1867940]\n\tBaseThreadInitThunk [0x74258494+36]\n\tRtlAreBitsSet [0x778740E8+136]\n\tRtlAreBitsSet [0x778740B8+88]","statusTrace":"self = <Tests.test_searchAndFilter.Test_searchAndFilter object at 0x000001EF7F2AB9A0>\ncarbrand = 'Honda', carTitle = 'Honda Cars'\n\n    @pytest.mark.parametrize(\"carbrand, carTitle\", dataReader.get_data(\"filtercars\"))\n    def test_searchUsingBudget(self, carbrand, carTitle):\n        log.logger.info(\"Test_gotoCarBrand is started\")\n        home = HomePage(self.driver)\n        home.gotoNewCars()\n        car = BaseCarPage(self.driver)\n        print(carbrand)\n        if carbrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n>           car.filterCarsbyBudget()\n\ntest_searchAndFilter.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\PageObjects\\BaseCarPage.py:30: in filterCarsbyBudget\n    carpricemax = self.driver.find_element(By.XPATH, configReader.readConfig(\"webelements\", \"budgetSliderMax_Xpath\"))\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:857: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EF7F2A9900>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tBaseThreadInitThunk [0x74258494+36]\\\\n\\\\tRtlAreBitsSet [0x778740E8+136]\\\\n\\\\tRtlAreBitsSet [0x778740B8+88]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@placeholder='Max']\"}\nE         (Session info: chrome=105.0.5195.127)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00F3DF13+2219795]\nE       \tOrdinal0 [0x00ED2841+1779777]\nE       \tOrdinal0 [0x00DE423D+803389]\nE       \tOrdinal0 [0x00E13025+995365]\nE       \tOrdinal0 [0x00E131EB+995819]\nE       \tOrdinal0 [0x00E40F52+1183570]\nE       \tOrdinal0 [0x00E2E844+1108036]\nE       \tOrdinal0 [0x00E3F192+1175954]\nE       \tOrdinal0 [0x00E2E616+1107478]\nE       \tOrdinal0 [0x00E07F89+950153]\nE       \tOrdinal0 [0x00E08F56+954198]\nE       \tGetHandleVerifier [0x01232CB2+3040210]\nE       \tGetHandleVerifier [0x01222BB4+2974420]\nE       \tGetHandleVerifier [0x00FD6A0A+565546]\nE       \tGetHandleVerifier [0x00FD5680+560544]\nE       \tOrdinal0 [0x00ED9A5C+1808988]\nE       \tOrdinal0 [0x00EDE3A8+1827752]\nE       \tOrdinal0 [0x00EDE495+1827989]\nE       \tOrdinal0 [0x00EE80A4+1867940]\nE       \tBaseThreadInitThunk [0x74258494+36]\nE       \tRtlAreBitsSet [0x778740E8+136]\nE       \tRtlAreBitsSet [0x778740B8+88]\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException","steps":[],"attachments":[{"uid":"45ff62d18efda993","name":"log","source":"45ff62d18efda993.txt","type":"text/plain","size":752}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"get_browser::0","time":{"start":1666438211217,"stop":1666438216933,"duration":5716},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('get_browser')"},{"name":"parentSuite","value":"BDD.PythonPageObjectModel.Tests"},{"name":"suite","value":"test_searchAndFilter"},{"name":"subSuite","value":"Test_searchAndFilter"},{"name":"host","value":"2540L-138486-W"},{"name":"thread","value":"18676-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"BDD.PythonPageObjectModel.Tests.test_searchAndFilter"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"carTitle","value":"'Honda Cars'"},{"name":"carbrand","value":"'Honda'"},{"name":"get_browser","value":"'chrome'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('get_browser')"]},"source":"e29725565608ab3b.json","parameterValues":["'Honda Cars'","'Honda'","'chrome'"]}